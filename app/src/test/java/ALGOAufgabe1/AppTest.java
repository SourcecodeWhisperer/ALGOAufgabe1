/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ALGOAufgabe1;

import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;

import static org.junit.Assert.*;

public class AppTest {

    @Test
    public void testIntegerFromStdInCorrectInput(){
        InputStream sysBackUp = System.in;
        ByteArrayInputStream bais = new ByteArrayInputStream("q".getBytes());

        System.setIn(bais);

        assertThrows(Exception.class, () ->{int x = Console.readIntegerFromStdIn("\tPlease insert a number:",0);});
        //assertNotEquals(12,x);
        System.setIn(sysBackUp);
    }

    @Test
    public void testIntegerFromStdInIncorrectInput(){
        InputStream sysBackUp = System.in;
        ByteArrayInputStream bais = new ByteArrayInputStream("12".getBytes());

        System.setIn(bais);
        int x = Console.readIntegerFromStdIn("\tPlease insert a number:",1);
        assertEquals(12,x);
        System.setIn(sysBackUp);
    }


    @Test
    public void testStringFromStdinIncorrectInput(){
        InputStream sysBackUp = System.in;
        ByteArrayInputStream bais = new ByteArrayInputStream("".getBytes());

        System.setIn(bais);
        assertThrows(Exception.class, () ->{String prename = Console.readStringFromStdIn("Please inserat an prename");});
        System.setIn(sysBackUp);
    }

    @Test
    public void testStringFromStdinCorrectInput(){
        InputStream sysBackUp = System.in;
        ByteArrayInputStream bais = new ByteArrayInputStream("Nasiem".getBytes());

        System.setIn(bais);
        String prename = Console.readStringFromStdIn("Please inserat an prename");
        assertEquals("Nasiem",prename);
        System.setIn(sysBackUp);
    }



    @Test
    public void testEuclidDivisionRestRecursive(){
        int x = GCDDiv.EuclidDivisionRestRecursive(10,11);
        assertEquals(1,x);
    }

    @Test
    public void testEuclidDivisionRestIterative(){
        int x = GCDDiv.EuclidDivisionRestIterative(10,11);
        assertEquals(1,x);
    }

    @Test
    public void testEuclidSubstractionIterative (){
        int x = GCDSub.EuclidSubstractionIterative(10,11);
        assertEquals(1,x);
    }
    @Test
    public void testEuclidSubstractionRecursive(){
        int x = GCDSub.EuclidSubstractionRecursive(1233432,123123123);
        assertEquals(9,x);
    }

    @Test
    public void testSieveofEutotilis(){
        ArrayList<Integer> y = new ArrayList<>();
        // int y [] = {2,3,5,7,11};
        y.add(2);
        y.add(3);
        y.add(5);
        y.add(7);
        y.add(11);
        y.add(13);
        y.add(17);
        y.add(19);
        y.add(23);
        y.add(29);
        y.add(31);
        y.add(37);
        y.add(41);
        y.add(43);
        y.add(47);
        y.add(53);
        y.add(59);
        y.add(61);
        y.add(67);
        y.add(71);
        y.add(73);

        ArrayList<Integer> xw = new ArrayList<>();
        xw = Sieve.SieveofEutotilis(75);
        assertArrayEquals(xw.toArray(),y.toArray());
    }
}
